select(name, annotation) %>%
mutate(annotation = str_remove(annotation, " \\(.*"))
h3k9me3 <-
read_csv("data/second_case/peaks/H3K9me3_R1_peaks.csv") %>%
clean_names() %>%
left_join(h3k9Anno) %>% dplyr::rename(chrom = chr) %>%
mutate(chrom = paste0("chr", chrom))  %>%
filter(annotation == loci_annotation)
h3k9me3 <- read_csv("data/second_case/peaks/H3K9me3_R1_peaks.csv") %>% clean_names() %>%
left_join(h3k9Anno) %>% dplyr::rename(chrom = chr) %>%
mutate(chrom = paste0("chr", chrom))
h4k20me3 <- read_csv("second_case/peaks/H4K20me3_R1_peaks.csv") %>% clean_names() %>%
left_join(h4k20Anno) %>% dplyr::rename(chrom = chr) %>%
mutate(chrom = paste0("chr", chrom))
h3k9me3 <- read_csv("data/second_case/peaks/H3K9me3_R1_peaks.csv") %>% clean_names() %>%
left_join(h3k9Anno) %>% dplyr::rename(chrom = chr) %>%
mutate(chrom = paste0("chr", chrom))
h4k20me3 <- read_csv("second_case/peaks/H4K20me3_R1_peaks.csv") %>% clean_names() %>%
left_join(h4k20Anno) %>% dplyr::rename(chrom = chr) %>%
mutate(chrom = paste0("chr", chrom))
h4k20me3 <- read_csv("data/second_case/peaks/H4K20me3_R1_peaks.csv") %>% clean_names() %>%
left_join(h4k20Anno) %>% dplyr::rename(chrom = chr) %>%
mutate(chrom = paste0("chr", chrom))
bt_intersect_histone <- bed_intersect(h3k9me3, h4k20me3) %>%
filter(.overlap != 0) %>%
mutate(Type.y = "histones" )
p_inter <- ggplot(bt_intersect, aes(.overlap)) +
geom_freqpoly(aes(color = Type.y), binwidth = 1) +
guides(color = guide_legend(title = "histones")) +
ggtitle("Frequency of intersections between H3K9me3 and H4K20me3  (full)") +
labs(x = "overlap length")
p_inter_lim <- p_inter + xlim(0, 2500) +
guides(color = guide_legend(title = "histones")) +
ggtitle("Frequency of intersections between H3K9me3 and H4K20me3  (1,2500)") +
labs(x = "overlap length")
p_inter_xylim <- p_inter +   xlim(0, 2500) + ylim(0, 25) +
guides(color = guide_legend(title = "histones")) +
ggtitle("Frequency of intersections between H3K9me3 and H4K20me3  (1,2500)") +
labs(x = "overlap length")
count(bt_intersect, .overlap) %>% arrange(desc(n)) %>%
rename(overlap_legnth = .overlap)
count(bt_intersect, .overlap) %>% arrange(desc(n)) %>%
dplyr::rename(overlap_legnth = .overlap)
p_inter / p_inter_lim / p_inter_xylim
# hk length
p_host <- ggplot(h3k9me3, aes(length)) +
xlim(0, 5000) + ylim(0, 50) +
geom_freqpoly(color = "blue", binwidth = 1) +
guides(color = guide_legend(title = "Feature")) +
ggtitle("Length distribution of H3K9me3") +
theme(legend.position = "none") +
labs(x = "length")
p_host
p_nest <- ggplot(h4k20me3, aes(length)) +
xlim(0, 5000) + ylim(0, 50) +
geom_freqpoly(color = "blue", binwidth = 1) +
guides(color = guide_legend(title = "Feature")) +
ggtitle("Length distribution of H4K20me3") +
labs(x = "length")
p_inter <- ggplot(bt_intersect_histone, aes(.overlap)) +
geom_freqpoly(color = "red",binwidth = 1) +
xlim(0, 5000) + ylim(0,30) +
ggtitle("Length distribution of intersections")+
labs(x = "overlap length")
p_host / p_nest / p_inter
# This script is used check the length distribution of
# overlapped region
# for both case 1 and case2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Case2: Non-B/8-oxoG ----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## 1 Not by chr ----
### 1.1 Running the mapping ----
oxidative <- oxidative_all[1]
map_shuffle_tbl <- MapGenomewide(
oxidative,
nonbDB,
n_core = 36L
)
host_feature = oxidative[[1]] %>% mutate(Type = "8-oxo-dG")
nest_feature = nonbDB %>% bind_rows() %>% mutate(length = end - start)
### Check Overlapps ----
bt_intersect <- bed_intersect(host_feature, nest_feature) %>%
filter(.overlap != 0) %>%
mutate(nonb_length = end.y - start.y)
dplyr::count(bt_intersect, .overlap) %>% arrange(desc(n)) %>%
dplyr::rename(overlap_legnth = .overlap)
p_inter <- ggplot(bt_intersect, aes(.overlap)) +
geom_freqpoly(aes(color = Type.y), binwidth = 1) +
guides(color = guide_legend(title = "Non-B types")) +
ggtitle("Frequency of intersections between non-B and 8-oxo-dG  (full)") +
labs(x = "overlap length")
p_inter_lim <- p_inter + xlim(0, 100) +
guides(color = guide_legend(title = "Non-B types")) +
ggtitle("Frequency of intersections between non-B and 8-oxo-dG (1,100)")+
labs(x = "overlap length")
p_inter_fill <- ggplot(bt_intersect, aes(.overlap)) +
geom_histogram(aes(fill = Type.y),
binwidth = 1, position = "fill") +
xlim(0, 100) +
guides(fill = guide_legend(title = "Non-B types")) +
ggtitle("Conditional density plots (1,100)")+
labs(x = "overlap length")
p_inter / p_inter_lim / p_inter_fill
# non-B length
p_host <- ggplot(host_feature, aes(length)) +
xlim(0, 2000) +
geom_freqpoly(color = "blue", binwidth = 1) +
guides(color = guide_legend(title = "Feature")) +
ggtitle("Length distribution of 8-oxo-dG") +
theme(legend.position = "none") +
labs(x = "length")
p_host
p_nest <- ggplot(nest_feature, aes(length)) +
xlim(0, 100) +
geom_freqpoly(aes(color = "blue"), binwidth = 1) +
guides(color = guide_legend(title = "Feature")) +
ggtitle("Length distribution of non-B forming motifs") +
labs(x = "length")
p_inter <- ggplot(bt_intersect, aes(.overlap)) +
geom_freqpoly(aes(color = "red"),binwidth = 1) +
guides(color = guide_legend(title = "Non-B types"))  +
xlim(0, 100) +
ggtitle("Length distribution of intersections")+
labs(x = "overlap length")
p_host / p_nest / p_inter
p_nest <- ggplot(nest_feature, aes(length)) +
xlim(0, 100) +
geom_freqpoly(color = "blue", binwidth = 1) +
guides(color = guide_legend(title = "Feature")) +
ggtitle("Length distribution of non-B forming motifs") +
labs(x = "length")
p_inter <- ggplot(bt_intersect, aes(.overlap)) +
geom_freqpoly(color = "red",binwidth = 1) +
guides(color = guide_legend(title = "Non-B types"))  +
xlim(0, 100) +
ggtitle("Length distribution of intersections")+
labs(x = "overlap length")
p_host / p_nest / p_inter
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# check the G percent of nonB -----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
real_oxog_gdata = bind_rows(
real %>% select(group, gcontent = pG, length)
)
nonbDB
all_nonb = nonbDB %>% bind_rows(.id = "group")
all_nonb_property = all_nonb %>%
mutate(length = nchar(Sequence)) %>%
mutate(gcontent = str_count(Sequence, "G") / length)
dist_len =
ggplot(all_nonb_property, aes(length)) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "group")) +
ggtitle("Length distribution") +
labs(x = "length") +
xlim(0, 50)
dist_gcontent =
ggplot(
# filter G Content
all_nonb_property %>% filter(gcontent>0),
aes(gcontent)) +
geom_density(aes(color = group)) +
geom_density(data = real_oxog_gdata, color = "red", alpha =0.1, size = 1) +
guides(color = guide_legend(title = "Feature types")) +
ggtitle("gcontent distribution") +
scale_x_continuous(labels = scales::percent, limits = c(0,1)) +
theme(axis.title = element_text(face = "bold")) +
labs(x = "G%", title = "G% distribution")
real = oxidative_all[[1]] %>% mutate(group = "0")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# check the G percent of nonB -----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
real_oxog_gdata = bind_rows(
real %>% select(group, gcontent = pG, length)
)
nonbDB
all_nonb = nonbDB %>% bind_rows(.id = "group")
all_nonb_property = all_nonb %>%
mutate(length = nchar(Sequence)) %>%
mutate(gcontent = str_count(Sequence, "G") / length)
dist_len =
ggplot(all_nonb_property, aes(length)) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "group")) +
ggtitle("Length distribution") +
labs(x = "length") +
xlim(0, 50)
dist_gcontent =
ggplot(
# filter G Content
all_nonb_property %>% filter(gcontent>0),
aes(gcontent)) +
geom_density(aes(color = group)) +
geom_density(data = real_oxog_gdata, color = "red", alpha =0.1, size = 1) +
guides(color = guide_legend(title = "Feature types")) +
ggtitle("gcontent distribution") +
scale_x_continuous(labels = scales::percent, limits = c(0,1)) +
theme(axis.title = element_text(face = "bold")) +
labs(x = "G%", title = "G% distribution")
dist_gcontent/dist_len
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Others ----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Number of non-B motifs with G% > 0
mean(all_nonb_property$gcontent>0)
all_nonb_property %>%
summarise(mean(gcontent > 0), .by = "Type") %>%
ggplot(aes(y = Type, x = `mean(gcontent > 0)`, fill = Type)) +
xlim(0,1) +
theme(legend.position = "none") +
geom_col()
# check correlation
all_nonb_property %>%
filter(group == "Z_DNA_Motif") %>%
ggplot(aes(x = length, y = gcontent)) +
geom_point(alpha = 1/20) +
stat_cor(method = "spearman") +
xlim(0, 100) +
ylim(0, 1) +
geom_smooth(method=lm, se=FALSE)
# check correlation
all_nonb_property %>%
filter(group == "Z_DNA_Motif") %>%
ggplot(aes(x = length, y = gcontent)) +
geom_point(alpha = 1/20) +
stat_cor(method = "spearman") +
xlim(0, 100) +
ylim(0, 1) +
geom_smooth(method=lm, se=FALSE)
?stat_cor
# check correlation
all_nonb_property %>%
filter(group == "Z_DNA_Motif") %>%
ggplot(aes(x = length, y = gcontent)) +
geom_point(alpha = 1/20) +
ggpubr::stat_cor(method = "spearman") +
xlim(0, 100) +
ylim(0, 1) +
geom_smooth(method=lm, se=FALSE)
p_inter / p_inter_lim / p_inter_fill
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3. Check the G percent of oxoG -----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
col_grey = rep("grey60", 5) %>% set_names(1:5)
oxidative_all
real = oxidative_all[[1]] %>% mutate(group = "0")
simu = oxidative_all[2:6] %>% bind_rows(.id = "group")
data = bind_rows(
real %>% select(group, gcontent = pG, length),
simu %>% select(group, gcontent = simu_pg, length),
)
dist_len =
ggplot(data, aes(length)) +
xlim(0, 1000) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("Length distribution") +
labs(x = "Length(bases)") +
#scale_color_manual(values = c("0"="red",col_grey)) +
scale_size_manual(values = c(2,1,1,1,1,1)) +
theme(axis.title = element_text(face = "bold"))
dist_gcontent =
ggplot(data, aes(gcontent)) +
ylim(0, 8) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("G% distribution") +
labs(x = "G%")+
scale_color_manual(values = c("0"="red",col_grey)) +
scale_x_continuous(labels = scales::percent, limits = c(0,0.6)) +
theme(axis.title = element_text(face = "bold"))
(oxog_distribution_withG = dist_gcontent/dist_len)
col_grey = rep("grey60", 5) %>% set_names(1:5)
simu_length = read_rds("data/first_case/region_noG%_noChr_simu.50027x20.rds")
data = bind_rows(
real %>% select(group, gcontent = pG, length),
simu_length %>%
filter(group %in% 1:5) %>%
select(group, gcontent = simu_pg, length),
)
dist_len =
ggplot(data, aes(length)) +
xlim(0, 1000) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("Length distribution") +
labs(x = "Length(bases)") +
#scale_color_manual(values = c("0"="red",col_grey)) +
theme(axis.title = element_text(face = "bold"))
dist_gcontent =
ggplot(data, aes(gcontent)) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("G% distribution") +
labs(x = "G%")+
scale_color_manual(values = c("0"="red",col_grey)) +
scale_x_continuous(labels = scales::percent, limits = c(0,0.6)) +
theme(axis.title = element_text(face = "bold"))
oxog_distribution_withoutG = dist_gcontent/dist_len
oxog_distribution_withG |
oxog_distribution_withoutG
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 4. check the Gpercent distribution of nonB -----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
real = oxidative_all[[1]] %>% mutate(group = "0")
real_oxog_gdata = bind_rows(
real %>% select(group, gcontent = pG, length)
)
nonbDB
all_nonb = nonbDB %>% bind_rows(.id = "group")
all_nonb_property = all_nonb %>%
mutate(length = nchar(Sequence)) %>%
mutate(gcontent = str_count(Sequence, "G") / length)
dist_len =
ggplot(all_nonb_property, aes(length)) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "group")) +
ggtitle("Length distribution") +
labs(x = "length") +
xlim(0, 50)
dist_gcontent =
ggplot(
# filter G Content
all_nonb_property %>% filter(gcontent>0),
aes(gcontent)) +
geom_density(aes(color = group)) +
geom_density(data = real_oxog_gdata, color = "red", alpha =0.1, size = 1) +
guides(color = guide_legend(title = "Feature types")) +
ggtitle("gcontent distribution") +
scale_x_continuous(labels = scales::percent, limits = c(0,1)) +
theme(axis.title = element_text(face = "bold")) +
labs(x = "G%", title = "G% distribution")
dist_gcontent/dist_len
dist_gcontent/dist_len
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Others ----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Number of non-B motifs with G% > 0
mean(all_nonb_property$gcontent>0)
all_nonb_property %>%
summarise(mean(gcontent > 0), .by = "Type") %>%
ggplot(aes(y = Type, x = `mean(gcontent > 0)`, fill = Type)) +
xlim(0,1) +
theme(legend.position = "none") +
geom_col()
# check correlation
all_nonb_property %>%
filter(group == "Z_DNA_Motif") %>%
ggplot(aes(x = length, y = gcontent)) +
geom_point(alpha = 1/20) +
ggpubr::stat_cor(method = "spearman") +
xlim(0, 100) +
ylim(0, 1) +
geom_smooth(method=lm, se=FALSE)
options(bedtools.path = "/usr/bin/")
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 0 Libraries ----
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(tidyverse)
library(GenomicRanges)
library(scales)
library(tictoc)
library(valr)
library(furrr)
library(BSgenome.Hsapiens.UCSC.hg19)
library(tidyverse)
library(ggpubr)
library(vroom)
library(ggprism)
library(parallel)
library(patchwork)
library(ComplexHeatmap)
select <- dplyr::select
filter <- dplyr::filter
rename <- dplyr::rename
theme_set(
theme_bw() +
theme(panel.grid = element_blank()) +
theme(legend.position = "bottom") +
theme(
legend.position = c(0.99, 0.99),
legend.justification = c('right', "top"),
legend.background = element_blank(),
legend.key.size = unit(2, "mm")
)
)
nonb_real_simu_list
/stor/work/CancerClinicalGenomics/QX/Github/MoCoLo/script/0_global.R
exists("nonbDB")
region_real
oxidative_all[[1]]
mutate(group = "0")
styler:::style_selection()
oxog_chr_simuG <- readRDS("/stor/work/CancerClinicalGenomics/QX/Github/MoCoLo/data/first_case/oxog_chr_simuG.rds")
oxog_chr_simuG
nonb_real_simu_list
all_nonb_property
SimuPosistion
start = 0.01
step = 0.01
zpath = sprintf(
here::here("data/first_case/nonb_hyperparameter_simuG_%s_%s(%s).rds"),
nonb_name, start, step
)
nonb_name = "Z_DNA_Motif"
zpath = sprintf(
here::here("data/first_case/nonb_hyperparameter_simuG_%s_%s(%s).rds"),
nonb_name, start, step
)
start = 0.01
step = 0.01
zpath = sprintf(
here::here("data/first_case/nonb_hyperparameter_simuG_%s_%s(%s).rds"),
nonb_name, start, step
)
simu_check = read_rds(zpath)
thename = sprintf("simuG_%s_%s", start, step)
if (start != 1) {
plot_title = sprintf("Start(%.0f%%), Step(%.0f%%)", start*100, step*100)
} else {
plot_title = "No G% restriction"
}
plot_saver[[thename]] = simu_check[[2]] %>%
mutate(real_pg = real_ng / length) %>%
select(peak_id, expected = simu_pg, observed = real_pg) %>%
gather("Group", "gcontent", -peak_id) %>%
ggplot(aes(x = gcontent, color = Group)) +
geom_density(size = 1) +
scale_color_manual(values = c("blue", "red")) +
scale_x_continuous(labels = scales::percent, limits = c(0,1)) +
theme(axis.title = element_text(face = "bold")) +
labs(x = "G%", title = plot_title)
# QC: check the simulation result
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Test the hyperparameter
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
plot_saver = list()
plot_saver[[thename]] = simu_check[[2]] %>%
mutate(real_pg = real_ng / length) %>%
select(peak_id, expected = simu_pg, observed = real_pg) %>%
gather("Group", "gcontent", -peak_id) %>%
ggplot(aes(x = gcontent, color = Group)) +
geom_density(size = 1) +
scale_color_manual(values = c("blue", "red")) +
scale_x_continuous(labels = scales::percent, limits = c(0,1)) +
theme(axis.title = element_text(face = "bold")) +
labs(x = "G%", title = plot_title)
plot_saver
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. (Main plot) Check the G percent of oxoG -----
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
col_grey = rep("grey60", 5) %>% set_names(1:5)
oxidative_all
real = oxidative_all[[1]] %>% mutate(group = "0")
simu = oxidative_all[2:6] %>% bind_rows(.id = "group")
data = bind_rows(
real %>% select(group, gcontent = pG, length),
simu %>% select(group, gcontent = simu_pg, length),
)
dist_len =
ggplot(data, aes(length)) +
xlim(0, 1000) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("Length distribution") +
labs(x = "Length(bases)") +
#scale_color_manual(values = c("0"="red",col_grey)) +
scale_size_manual(values = c(2,1,1,1,1,1)) +
theme(axis.title = element_text(face = "bold"))
dist_gcontent =
ggplot(data, aes(gcontent)) +
ylim(0, 8) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("G% distribution") +
labs(x = "G%")+
scale_color_manual(values = c("0"="red",col_grey)) +
scale_x_continuous(labels = scales::percent, limits = c(0,0.6)) +
theme(axis.title = element_text(face = "bold"))
(oxog_distribution_withG = dist_gcontent/dist_len)
col_grey = rep("grey60", 5) %>% set_names(1:5)
simu_length = read_rds("data/first_case/region_noG%_noChr_simu.50027x20.rds")
data = bind_rows(
real %>% select(group, gcontent = pG, length),
simu_length %>%
filter(group %in% 1:5) %>%
select(group, gcontent = simu_pg, length),
)
dist_len =
ggplot(data, aes(length)) +
xlim(0, 1000) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("Length distribution") +
labs(x = "Length(bases)") +
#scale_color_manual(values = c("0"="red",col_grey)) +
theme(axis.title = element_text(face = "bold"))
dist_gcontent =
ggplot(data, aes(gcontent)) +
geom_density(aes(color = group)) +
guides(color = guide_legend(title = "Obs.(0)\nExp.(>1)")) +
ggtitle("G% distribution") +
labs(x = "G%")+
scale_color_manual(values = c("0"="red",col_grey)) +
scale_x_continuous(labels = scales::percent, limits = c(0,0.6)) +
theme(axis.title = element_text(face = "bold"))
oxog_distribution_withoutG = dist_gcontent/dist_len
oxog_distribution_withG |
oxog_distribution_withoutG
oxog_simu_noG
region_real
